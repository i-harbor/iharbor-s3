"""
Django settings for s3server project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from pathlib import Path

from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'w!rj1md51ghisf=m50bawol=dd$_f5_c)kjd!f$k#lwh!ii5%*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.s3.obs.cstcloud.cn']
SERVER_HTTP_HOST_NAME = 's3.obs.cstcloud.cn'    # 客户端请求使用的域名，需要此判断<bucket.host>

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'django_hosts',
    'corsheaders',

    'users',
    's3api',
    'buckets'
]

MIDDLEWARE = [
    'utils.middleware.ServerHeaderMiddleware',
    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware'
]

ROOT_URLCONF = 's3server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 's3server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGES = (
    ('en', 'English'),
    ('zh-hans', '中文简体'),
)

# 翻译文件所在目录
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# 自定义用户模型
AUTH_USER_MODEL = 'users.UserProfile'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# 禁止未以/结尾url的请求重定向
APPEND_SLASH = False

# 日志配置
LOGGING_FILES_DIR = '/var/log/iharbor'
if not os.path.exists(LOGGING_FILES_DIR):
    os.makedirs(LOGGING_FILES_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'dubug_formatter': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        # logging file settings
        'file': {
            'level': 'WARNING',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOGGING_FILES_DIR, 'iharbor-s3.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024*200,  # 200MB
            'backupCount': 10           # 最多10个文件
        },
        # output to console settings
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # working with debug mode
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # debug logging file settings
        'debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],     # working with debug mode
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOGGING_FILES_DIR, 's3-debug.log'),
            'formatter': 'dubug_formatter',
            'maxBytes': 1024*1024*200,  # 200MB
            'backupCount': 10           # 最多10个文件
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'debug': {
            'handlers': ['debug'],
            'level': 'WARNING',
            'propagate': False,
        },
        # 'django.db.backends': {
        #     'handlers': ['console'],
        #     'propagate': True,
        #     'level':'DEBUG',
        # },
    },
}

# Ceph rados settings
CEPH_RADOS = {
    'CLUSTER_NAME': 'ceph',
    'USER_NAME': 'client.obs',
    'CONF_FILE_PATH': '/etc/ceph/ceph.conf',
    'KEYRING_FILE_PATH': '/etc/ceph/ceph.client.obs.keyring',
    'POOL_NAME': ('xxx',),
    'MULTIPART_POOL_NAME': 'obs_test',
}

DATABASE_ROUTERS = [
    's3server.db_routers.MetadataRouter',
]

# django-hosts
ROOT_HOSTCONF = 's3server.hosts'
DEFAULT_HOST = 'default'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        's3api.renders.CusXMLRenderer',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        's3api.auth.S3V4Authentication',
        # 'rest_framework.authentication.BasicAuthentication'
    ],
    'DEFAULT_PARSER_CLASSES': [
        's3api.parsers.S3XMLParser',
        'rest_framework.parsers.FormParser',        # 支持解析application/x-www-form-urlencoded方式的form表单数据，request.data将填充一个QueryDict
        'rest_framework.parsers.MultiPartParser'    # 支持解析multipart/form-data方式多部分HTML表单内容，支持文件上载，request.data将填充一个QueryDict
    ],
    # Exception handling
    'EXCEPTION_HANDLER': 's3api.viewsets.exception_handler',
    'NON_FIELD_ERRORS_KEY': 'non_field_errors',
    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,

    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

S3_MULTIPART_UPLOAD_MAX_SIZE = 2 * 1024 ** 3        # 2GB
S3_MULTIPART_UPLOAD_MIN_SIZE = 5 * 1024 ** 2        # 5MB

CORS_ALLOW_ALL_ORIGINS = True       # 允许所有请求来源跨域
CORS_ALLOW_HEADERS = ['*', ]
# CORS_ALLOW_HEADERS = list(default_headers) + [
#     'private',
#     'range',
#     'expires',
#     'content-encoding',
#     'content-length',
#     'content-md5',
#     'date',
#     'expect',
#     'host',
#     'if-match',
#     'if-none-match',
#     'if-modified-since',
#     'if-unmodified-since',
#     'x-amz-date',
#     'x-amz-acl',
#     'x-amz-expected-bucket-owner',
#     'x-amz-content-sha256',
#     'x-amz-storage-class',
#     'x-amz-user-agent'
# ]

CORS_EXPOSE_HEADERS = [
    'accept-ranges',
    'content-length',
    'content-type',
    'content-disposition',
    'content-encoding',
    'content-range',
    'connection',
    'date',
    'etag',
    'server',
    'x-amz-delete-marker',
    'x-amz-id-2',
    'x-amz-request-id',
    'x-amz-version-id',
    'x-amz-storage-class',
    'x-amz-mp-parts-count'
]

from .security import *
